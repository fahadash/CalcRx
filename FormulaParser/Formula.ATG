using System.Collections.Generic;
using System.Linq.Expressions;
using FormulaParser.Helpers;

$namespace=FormulaParser

COMPILER Formula
public Expression Output { get; set; }
public Expression BaseExpression { get; set; }

CHARACTERS
	digit = '0'..'9'.
	letter = 'A'..'Z' + 'a'..'z'.
TOKENS
	number = digit {digit}.
	identifier = letter {letter|digit}.
	self = "_".
IGNORE '\r' + '\n'

PRODUCTIONS
	Formula											(. Expression e; .)
	= Term<out e>									(. Expression e1; .)
	{ 												(. Func<Expression, Expression, Expression> op = null; .)
	( '+'											(. op = ExpressionsHelper.Add; .)
	| '-'											(. op = ExpressionsHelper.Subtract; .)
	) 
	Term<out e1>									(. e = op(e, e1); .)
	}												(. this.Output = e; .).
	
	Term<out Expression e>							
	= Factor<out e>									(. Expression e1; .)
	{												(. Func<Expression, Expression, Expression> op = null; .)
	( '*'											(. op = ExpressionsHelper.Multiply; .) 
	| 
	"/" 											(. op = ExpressionsHelper.Divide; .)
	| 
	'%' 											(. op = ExpressionsHelper.Mod; .)
	|
	'^'												(. op = ExpressionsHelper.Exponent; .)
	) 
	Factor<out e1>									(. e = op(e, e1); .)
	}.
		
	Factor<out Expression e>						(. e = null; .)
	=
	Numeric<out e>
	| 
	self											(. e = BaseExpression; .)
	|	
	FunctionOrProperty<out e>
	|
	'('												(. int sign = 1; .)
	['-'											(. sign = -1; .)
	] 
	Formula 										(. e = ExpressionsHelper.SignMultiply(this.Output, sign); .)
	')'
	.
	
	
	FunctionOrProperty<out Expression e>			(. bool propertyAccess = true; string functionName; List<Expression> args = null; Expression temp = null; .)
	= Name<out functionName>
	[
	"(" 											(. propertyAccess = false; .)
	Arg<out temp>									(. args = new List<Expression>(); args.Add(temp); .)
	{","
	Arg<out temp>									(. args.Add(temp); .)
	} 												
	")"]											(. if (propertyAccess) e = ExpressionsHelper.PropertyAccess(BaseExpression, functionName); else e = ExpressionsHelper.FunctionCall(functionName, args); .).
	
	Name<out string name> = identifier				(. name = t.val; .).
	
	Arg<out Expression e>							(. e = null; .)
	= Factor<out e> | String<out e>.
	
	String<out Expression e> = "\"" ANY "\""		(. e = Expression.Constant(t.val); .).
	
	Numeric<out Expression e> =	number				(. e = Expression.Constant(Convert.ToDouble(t.val)); .).
	
END Formula.