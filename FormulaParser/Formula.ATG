using System.Linq.Expressions;

$namespace=FormulaParser

COMPILER Formula
public Expression Output { get; set; }
public Expression BaseExpression { get; set; }

CHARACTERS
	digit = '0'..'9'.
	letter = 'A'..'Z' + 'a'..'z'.
TOKENS
	number = digit {digit}.
	identifier = letter {letter|digit}.
	self = "self".
IGNORE '\r' + '\n'

PRODUCTIONS
	Formula											(. Expression e; .)
	= Term<out e>									(. Expression e1; .)
	{ 												(. Func<Expression, Expression, Expression> op = null; .)
	( '+'											(. op = ExpressionsHelper.Add; .)
	| '-'											(. op = ExpressionsHelper.Subtract; .)
	) 
	Term<out e1>									(. e = op(e, e1); .)
	}												(. this.Output = e; .).
	
	Term<out Expression e>							
	= Factor<out e>									(. Expression e1; .)
	{												(. Func<Expression, Expression, Expression> op = null; .)
	( '*'											(. op = ExpressionsHelper.Multiply; .) 
	| 
	"/" 											(. op = ExpressionsHelper.Divide; .)
	| 
	'%' 											(. op = ExpressionsHelper.Mod; .)
	|
	'^'												(. op = ExpressionsHelper.Exponent; .)
	) 
	Factor<out e1>									(. e = op(e, e1); .)
	}.
	
	Factor<out Expression e>						(. e = null; .)
	= number										(. e = Expression.Constant(Convert.ToDouble(t.val)); .)
	| 
	self											(. e = BaseExpression; .)
	.
	
END Formula.